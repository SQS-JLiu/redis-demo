redis事务:
redis事务本质：一组命令组合，一个事务中的所有命令都会被序列化，在事务中执行
会按照顺序执行。
一次性、顺序性、排他性，执行一系列的命令

Redis事务没有隔离级别的概念！

所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行！Exec

*Redis单条命令保存原子性，但是事务不保证原子性！

redis的事务：
・开启事务(multi)
・命令入队(...)
・执行事务(exec)

multi 开启事务
set k1 v1
set k2 v2
get k1
exec 执行事务（执行队列中的指令）
discard 取消事务（事务队列中的命令都不会执行）


悲观锁：
・很悲观，认为什么时候都会出问题，无论什么时候都会加锁

乐观锁：
・很乐观，认为什么时候都不会出问题，所以不会上锁，更新数据时去判断一下
  ，此期间是是否改变（获取version），若没改变则更新

watch money  #watch可以当做乐观锁使用
multi 
decrby money 10
incrby out 10
exec  #若money被别的线程修改了，则事务会执行失败
unwatch #手动关闭watch


Jedis：
使用Java操作Redis的中间件

Redis发布订阅
# 发布指令格式
# publish channel message
# 订阅指令格式
# subscribe channel
subscribe kuangshenshuo
publish kuansghenshuo "hello redis"
#unsubscribe channel 取消订阅频道

Redis主从复制：
主从复制，读写分离
1、数据冗余
2、故障恢复
3、负载均衡
4、高可用（集群）
配置集群只需要配置从机：
slaveof ip port #认老大（命令执行是暂时的）
在配置文件中配置是永久的：
replicaof ip port
#主机可以写，从机只能读

#哨兵模式：
1.配置哨兵文件sentinel.conf
# sentinel monitor 被监控的名称 host port 1
sentinel monitor myredis 127.0.0.1 6379 1
# 后面的数字代表Master挂掉后，哨兵投票后得票达到1的slave会变成master
2.启动哨兵
redis-sentinel sentinel.conf

主机挂了，从机被选举为新主机后，之前的旧主机恢复后是从机不会恢复成主机

*Redis缓存穿透和雪崩：
# 缓存穿透（查不到）：
如果缓存中没有，这个时候就会去数据库中查询，
当用户很多的时候，缓存都没有命中，于是都去数据库中查询，这时候就会出现缓存穿透
# 避免穿透的方法：
# 布隆过滤器：
布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，
不符合则丢弃，从而避免了对底层存储系统的查询压力
# 缓存空对象

# 缓存击穿（量太大，缓存过期）：
指一个key非常的热点，在不停的扛着大并发，大并发一直集中对这个点集中访问，
当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，会导致数据库
瞬间压力过大
#解决的方案：
1.设置热点数据永不过期
从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题
2.加互斥锁
分布式锁，只保证一个线程访问

# 缓存雪崩（缓存集中过期失效，或缓存服务器宕机或断网）